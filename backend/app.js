require("dotenv").config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const morgan = require("morgan");
const rateLimit = require("express-rate-limit");

const authRoutes = require("./routes/authRoutes");
const protectedRoutes = require("./routes/protectedRoutes");
const productRoutes = require("./routes/productRoutes");
const cartRoutes = require("./routes/cartRoutes");
const orderRoutes = require("./routes/orderRoutes");

const setupSwagger = require("./config/swagger");

const app = express();

// üì¶ Middleware (–ü–æ–¥–Ω–∏–º–∞–µ–º –≤–≤–µ—Ä—Ö)
app.use(express.json()); // ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –≤ req.body
app.use(express.urlencoded({ extended: true })); // ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ form-data

// üõ°Ô∏è CORS (–†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏)
app.use(cors({ origin: "*" }));

// üõ†Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use(morgan("dev"));

// üö¶ Rate Limiting (100 –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ 15 –º–∏–Ω—É—Ç —Å –æ–¥–Ω–æ–≥–æ IP)
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: "Too many requests from this IP, please try again later.",
});
app.use(limiter);

// üìù Swagger-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
setupSwagger(app);

// üìÇ –ú–∞—Ä—à—Ä—É—Ç—ã
app.use("/api/auth", authRoutes);
app.use("/api/protected", protectedRoutes);
app.use("/api/products", productRoutes); // ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ –ø–æ—Å–ª–µ express.json()
app.use("/api/cart", cartRoutes);
app.use("/api/orders", orderRoutes);

// üì° –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get("/", (req, res) => {
  res.send("API is running...");
});

// üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("‚úÖ MongoDB connected"))
  .catch((err) => console.error("‚ùå MongoDB connection error:", err));

module.exports = app;
